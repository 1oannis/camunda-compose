# Camunda 8 Self-Managed Docker Compose
# This configuration is organized according to university requirements
# with separate configuration files for each service.

services:
  zeebe:
    image: camunda/zeebe:${CAMUNDA_ZEEBE_VERSION}
    container_name: zeebe
    ports:
      - "26500:26500"
      - "9600:9600"
      - "8088:8080"
    env_file:
      - configuration/runtime.env
      - configuration/runtime_local_SAMPLEHOST.env
      - container.zeebe/runtime.env
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "timeout 10s bash -c ':> /dev/tcp/127.0.0.1/9600' || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - zeebe:/usr/local/zeebe/data
    networks:
      - camunda-platform
    depends_on:
      - elasticsearch
      - identity
    profiles:
      - ''
      - orchestration

  operate:
    image: camunda/operate:${CAMUNDA_OPERATE_VERSION}
    container_name: operate
    ports:
      - "8081:8080"
    env_file:
      - configuration/runtime.env
      - configuration/runtime_local_SAMPLEHOST.env
      - container.operate/runtime.env
    healthcheck:
      test: ["CMD-SHELL", "wget -O - -q 'http://localhost:9600/actuator/health/readiness'"]
      interval: 30s
      timeout: 1s
      retries: 5
      start_period: 30s
    volumes:
      - operate_tmp:/tmp
    networks:
      - camunda-platform
    depends_on:
      - zeebe
      - identity
      - elasticsearch
    profiles:
      - ''
      - orchestration

  tasklist:
    image: camunda/tasklist:${CAMUNDA_TASKLIST_VERSION}
    container_name: tasklist
    ports:
      - "8082:8080"
    env_file:
      - configuration/runtime.env
      - configuration/runtime_local_SAMPLEHOST.env
      - container.tasklist/runtime.env
    healthcheck:
      test: ["CMD-SHELL", "wget -O - -q 'http://localhost:9600/actuator/health/readiness'"]
      interval: 30s
      timeout: 1s
      retries: 5
      start_period: 30s
    volumes:
      - tasklist_tmp:/tmp
    networks:
      - camunda-platform
    depends_on:
      zeebe:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      identity:
        condition: service_healthy
    profiles:
      - ''
      - orchestration

  connectors:
    image: camunda/connectors-bundle:${CAMUNDA_CONNECTORS_VERSION}
    container_name: connectors
    ports:
      - "8085:8080"
    env_file:
      - configuration/runtime.env
      - configuration/runtime_local_SAMPLEHOST.env
      - container.connectors/runtime.env
      - connector-secrets.txt
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health/readiness"]
      interval: 30s
      timeout: 1s
      retries: 5
      start_period: 30s
    networks:
      - camunda-platform
    depends_on:
      - zeebe
      - operate
      - identity
    profiles:
      - ''
      - orchestration

  optimize:
    image: camunda/optimize:${CAMUNDA_OPTIMIZE_VERSION}
    container_name: optimize
    ports:
      - "8083:8090"
    env_file:
      - configuration/runtime.env
      - configuration/runtime_local_SAMPLEHOST.env
      - container.optimize/runtime.env
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8090/api/readyz"]
      interval: 30s
      timeout: 1s
      retries: 5
      start_period: 30s
    volumes:
      - "./.optimize/environment-config.yaml:/optimize/config/environment-config.yaml"
    restart: on-failure
    networks:
      - camunda-platform
    depends_on:
      - identity
      - elasticsearch
    profiles:
      - ''
      - orchestration

  identity:
    image: camunda/identity:${CAMUNDA_IDENTITY_VERSION}
    container_name: identity
    ports:
      - "8084:8084"
    env_file:
      - configuration/runtime.env
      - configuration/runtime_local_SAMPLEHOST.env
      - container.identity/runtime.env
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:8082/actuator/health"]
      interval: 5s
      timeout: 15s
      retries: 30
      start_period: 60s
    restart: on-failure
    volumes:
      - keycloak-theme:/app/keycloak-theme
    networks:
      - camunda-platform
      - identity-network
    depends_on:
      keycloak:
        condition: service_healthy
    profiles:
      - ''
      - identity

  postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: postgres
    env_file:
      - configuration/runtime.env
      - container.postgres/runtime.env
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - identity-network
    profiles:
      - ''
      - identity

  keycloak:
    image: bitnami/keycloak:${KEYCLOAK_SERVER_VERSION}
    container_name: keycloak
    volumes:
      - keycloak-theme:/opt/bitnami/keycloak/themes/identity
    ports:
      - "18080:18080"
    env_file:
      - configuration/runtime.env
      - configuration/runtime_local_SAMPLEHOST.env
      - container.keycloak/runtime.env
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:18080/auth"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s
    networks:
      - camunda-platform
      - identity-network
    depends_on:
      - postgres
    profiles:
      - ''
      - identity

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    env_file:
      - configuration/runtime.env
      - container.elasticsearch/runtime.env
    ulimits:
      memlock:
        soft: -1
        hard: -1
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cat/health | grep -q green"]
      interval: 30s
      timeout: 5s
      retries: 3
    volumes:
      - elastic:/usr/share/elasticsearch/data
    networks:
      - camunda-platform
    profiles:
      - ''
      - orchestration

  web-modeler-db:
    image: postgres:${POSTGRES_VERSION}
    container_name: web-modeler-db
    env_file:
      - configuration/runtime.env
      - container.web-modeler-db/runtime.env
    healthcheck:
      test: pg_isready -d web-modeler-db -U web-modeler-db-user
      interval: 5s
      timeout: 15s
      retries: 30
    networks:
      - web-modeler
    volumes:
      - postgres-web:/var/lib/postgresql/data
    profiles:
      - ''
      - web-modeler

  mailpit:
    # If you want to use your own SMTP server, you can remove this container
    # and configure RESTAPI_MAIL_HOST, RESTAPI_MAIL_PORT, REST_API_MAIL_USER,
    # REST_API_MAIL_PASSWORD and RESTAPI_MAIL_ENABLE_TLS in web-modeler-restapi
    container_name: mailpit
    image: axllent/mailpit:${MAILPIT_VERSION}
    ports:
      - "1025:1025"
      - "8075:8025"
    healthcheck:
      test: /usr/bin/nc -v localhost 1025
      interval: 30s
    networks:
      - web-modeler
    profiles:
      - ''
      - web-modeler

  web-modeler-restapi:
    image: camunda/web-modeler-restapi:${CAMUNDA_WEB_MODELER_VERSION}
    container_name: web-modeler-restapi
    command: /bin/sh -c "java $JAVA_OPTIONS org.springframework.boot.loader.JarLauncher"
    env_file:
      - configuration/runtime.env
      - configuration/runtime_local_SAMPLEHOST.env
      - container.web-modeler-restapi/runtime.env
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8091/health/readiness"]
      interval: 5s
      timeout: 15s
      retries: 30
    networks:
      - web-modeler
      - camunda-platform
    depends_on:
      web-modeler-db:
        condition: service_healthy
      mailpit:
        condition: service_started
      identity:
        condition: service_healthy
    profiles:
      - ''
      - web-modeler

  web-modeler-webapp:
    image: camunda/web-modeler-webapp:${CAMUNDA_WEB_MODELER_VERSION}
    container_name: web-modeler-webapp
    ports:
      - "8070:8070"
    env_file:
      - configuration/runtime.env
      - configuration/runtime_local_SAMPLEHOST.env
      - container.web-modeler-webapp/runtime.env
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8071/health/readiness"]
      interval: 5s
      timeout: 15s
      retries: 30
    networks:
      - web-modeler
      - camunda-platform
    depends_on:
      web-modeler-restapi:
        condition: service_healthy
    profiles:
      - ''
      - web-modeler

  web-modeler-websockets:
    image: camunda/web-modeler-websockets:${CAMUNDA_WEB_MODELER_VERSION}
    container_name: web-modeler-websockets
    ports:
      - "8060:8060"
    env_file:
      - configuration/runtime.env
      - container.web-modeler-websockets/runtime.env
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:8060/up"]
      interval: 5s
      timeout: 15s
      retries: 30
    networks:
      - web-modeler
    profiles:
      - ''
      - web-modeler

  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    container_name: kibana
    ports:
      - 5601:5601
    volumes:
      - kibana:/usr/share/kibana/data
    networks:
      - camunda-platform
    depends_on:
      - elasticsearch
    profiles:
      - ''
      - kibana

volumes:
  zeebe:
  elastic:
  postgres:
  keycloak-theme:
  kibana:
  operate_tmp:
  tasklist_tmp:
  postgres-web:

networks:
  camunda-platform:
  identity-network:
  web-modeler: