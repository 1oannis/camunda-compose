version: '3.8'

# Production-ready Camunda 8 Platform configuration
# Based on Camunda's recommended deployment architecture with adaptations for production use

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 5s
  retries: 5
  start_period: 30s

x-restart-policy: &restart-policy
  restart: always

services:

  # Zeebe - Process Engine (Core)
  zeebe:
    image: camunda/zeebe:${CAMUNDA_ZEEBE_VERSION}
    container_name: zeebe
    <<: *restart-policy
    ports:
      - "${ZEEBE_PORT:-26500}:26500"
      - "9600:9600"
      - "8088:8080"
    environment:
      - ZEEBE_BROKER_GATEWAY_SECURITY_AUTHENTICATION_MODE=${ZEEBE_AUTHENTICATION_MODE}
      - ZEEBE_BROKER_GATEWAY_SECURITY_AUTHENTICATION_IDENTITY_ISSUERBACKENDURL=http://keycloak:18080/auth/realms/camunda-platform
      - ZEEBE_BROKER_GATEWAY_SECURITY_AUTHENTICATION_IDENTITY_AUDIENCE=zeebe-api
      - ZEEBE_BROKER_GATEWAY_SECURITY_AUTHENTICATION_IDENTITY_BASEURL=http://identity:8084
      - ZEEBE_BROKER_GATEWAY_MULTITENANCY_ENABLED=${MULTI_TENANCY_ENABLED:-false}
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME=io.camunda.zeebe.exporter.ElasticsearchExporter
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL=http://elasticsearch:9200
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_BULK_SIZE=1
      - ZEEBE_BROKER_DATA_DISKUSAGECOMMANDWATERMARK=0.998
      - ZEEBE_BROKER_DATA_DISKUSAGEREPLICATIONWATERMARK=0.999
      - CAMUNDA_DATABASE_URL=http://elasticsearch:9200
      - CAMUNDA_IDENTITY_ISSUERBACKENDURL=http://keycloak:18080/auth/realms/camunda-platform
      - CAMUNDA_IDENTITY_BASEURL=http://identity:8084
      - CAMUNDA_IDENTITY_AUDIENCE=zeebe-api
      - SPRING_PROFILES_ACTIVE=identity-auth
      - JAVA_TOOL_OPTIONS=-Xms${ZEEBE_MEMORY:-512m} -Xmx${ZEEBE_MEMORY:-512m}
      - management.endpoints.web.exposure.include=health,info,metrics,prometheus,configprops
      - MANAGEMENT_ENDPOINT_CONFIGPROPS_SHOW_VALUES=ALWAYS
    healthcheck:
      test: /bin/bash /docker-config/healthcheck.sh
      <<: *healthcheck-defaults
    volumes:
      - ./container.zeebe/data:/usr/local/zeebe/data
      - ./container.zeebe/docker-config:/docker-config
      - ./container.zeebe/docker-entrypoint.d:/docker-entrypoint.d
      - ./container.zeebe/rw:/usr/local/zeebe/rw
    networks:
      - camunda-platform
    depends_on:
      - elasticsearch
      - identity

  # Operate - Operations interface
  operate:
    image: camunda/operate:${CAMUNDA_OPERATE_VERSION}
    container_name: operate
    <<: *restart-policy
    ports:
      - "${OPERATE_PORT:-8081}:8080"
    environment:
      - CAMUNDA_OPERATE_ZEEBE_GATEWAYADDRESS=zeebe:26500
      - ZEEBE_CLIENT_ID=${ZEEBE_CLIENT_ID}
      - ZEEBE_CLIENT_SECRET=${ZEEBE_CLIENT_SECRET}
      - ZEEBE_TOKEN_AUDIENCE=zeebe-api
      - ZEEBE_AUTHORIZATION_SERVER_URL=http://keycloak:18080/auth/realms/camunda-platform/protocol/openid-connect/token
      - CAMUNDA_OPERATE_ELASTICSEARCH_URL=http://elasticsearch:9200
      - CAMUNDA_OPERATE_ZEEBEELASTICSEARCH_URL=http://elasticsearch:9200
      - SPRING_PROFILES_ACTIVE=identity-auth
      - CAMUNDA_OPERATE_IDENTITY_BASEURL=http://identity:8084
      - CAMUNDA_OPERATE_IDENTITY_ISSUER_URL=http://${KEYCLOAK_HOST}:18080/auth/realms/camunda-platform
      - CAMUNDA_OPERATE_IDENTITY_ISSUER_BACKEND_URL=http://keycloak:18080/auth/realms/camunda-platform
      - CAMUNDA_OPERATE_IDENTITY_CLIENTID=operate
      - CAMUNDA_OPERATE_IDENTITY_CLIENTSECRET=XALaRPl5qwTEItdwCMiPS62nVpKs7dL7
      - CAMUNDA_OPERATE_IDENTITY_AUDIENCE=operate-api
      - CAMUNDA_OPERATE_MULTITENANCY_ENABLED=${MULTI_TENANCY_ENABLED:-false}
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://keycloak:18080/auth/realms/camunda-platform
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI=http://keycloak:18080/auth/realms/camunda-platform/protocol/openid-connect/certs
      - CAMUNDA_OPERATE_IDENTITY_RESOURCEPERMISSIONSENABLED=${RESOURCE_AUTHORIZATIONS_ENABLED:-true}
      - CAMUNDA_DATABASE_URL=http://elasticsearch:9200
      - management.endpoints.web.exposure.include=health,info,metrics,prometheus,configprops
      - MANAGEMENT_ENDPOINT_CONFIGPROPS_SHOW_VALUES=ALWAYS
      - management.endpoint.health.probes.enabled=true
      - ZEEBE_CLIENT_CONFIG_PATH=/tmp/zeebe_auth_cache
      - JAVA_TOOL_OPTIONS=-Xms${OPERATE_MEMORY:-512m} -Xmx${OPERATE_MEMORY:-512m}
    healthcheck:
      test: wget -O - -q 'http://localhost:9600/actuator/health/readiness'
      <<: *healthcheck-defaults
    volumes:
      - ./container.operate/data:/usr/local/operate/data
      - ./container.operate/docker-config:/docker-config
      - ./container.operate/docker-entrypoint.d:/docker-entrypoint.d
      - ./container.operate/rw:/usr/local/operate/rw
    networks:
      - camunda-platform
    depends_on:
      - zeebe
      - identity
      - elasticsearch

  # Tasklist - User task management
  tasklist:
    image: camunda/tasklist:${CAMUNDA_TASKLIST_VERSION}
    container_name: tasklist
    <<: *restart-policy
    ports:
      - "${TASKLIST_PORT:-8082}:8080"
    environment:
      - CAMUNDA_TASKLIST_ZEEBE_GATEWAYADDRESS=zeebe:26500
      - CAMUNDA_TASKLIST_ZEEBE_RESTADDRESS=http://zeebe:8080
      - ZEEBE_CLIENT_ID=${ZEEBE_CLIENT_ID}
      - ZEEBE_CLIENT_SECRET=${ZEEBE_CLIENT_SECRET}
      - ZEEBE_CLIENT_CONFIG_PATH=/tmp/zeebe_auth_cache
      - ZEEBE_TOKEN_AUDIENCE=zeebe-api
      - ZEEBE_AUTHORIZATION_SERVER_URL=http://keycloak:18080/auth/realms/camunda-platform/protocol/openid-connect/token
      - CAMUNDA_TASKLIST_ELASTICSEARCH_URL=http://elasticsearch:9200
      - CAMUNDA_TASKLIST_ZEEBEELASTICSEARCH_URL=http://elasticsearch:9200
      - SPRING_PROFILES_ACTIVE=identity-auth
      - CAMUNDA_TASKLIST_IDENTITY_BASEURL=http://identity:8084
      - CAMUNDA_TASKLIST_IDENTITY_ISSUER_URL=http://${KEYCLOAK_HOST}:18080/auth/realms/camunda-platform
      - CAMUNDA_TASKLIST_IDENTITY_ISSUER_BACKEND_URL=http://keycloak:18080/auth/realms/camunda-platform
      - CAMUNDA_TASKLIST_IDENTITY_CLIENTID=tasklist
      - CAMUNDA_TASKLIST_IDENTITY_CLIENTSECRET=XALaRPl5qwTEItdwCMiPS62nVpKs7dL7
      - CAMUNDA_TASKLIST_IDENTITY_AUDIENCE=tasklist-api
      - CAMUNDA_TASKLIST_MULTITENANCY_ENABLED=${MULTI_TENANCY_ENABLED:-false}
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://keycloak:18080/auth/realms/camunda-platform
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI=http://keycloak:18080/auth/realms/camunda-platform/protocol/openid-connect/certs
      - CAMUNDA_TASKLIST_IDENTITY_RESOURCE_PERMISSIONS_ENABLED=${RESOURCE_AUTHORIZATIONS_ENABLED:-true}
      - CAMUNDA_DATABASE_URL=http://elasticsearch:9200
      - management.endpoints.web.exposure.include=health,info,metrics,prometheus,configprops
      - MANAGEMENT_ENDPOINT_CONFIGPROPS_SHOW_VALUES=ALWAYS
      - management.endpoint.health.probes.enabled=true
      - JAVA_TOOL_OPTIONS=-Xms${TASKLIST_MEMORY:-512m} -Xmx${TASKLIST_MEMORY:-512m}
    healthcheck:
      test: wget -O - -q 'http://localhost:9600/actuator/health/readiness'
      <<: *healthcheck-defaults
    volumes:
      - ./container.tasklist/data:/usr/local/tasklist/data
      - ./container.tasklist/docker-config:/docker-config
      - ./container.tasklist/docker-entrypoint.d:/docker-entrypoint.d
      - ./container.tasklist/rw:/usr/local/tasklist/rw
    networks:
      - camunda-platform
    depends_on:
      - zeebe
      - elasticsearch
      - identity

  # Connectors - Integration framework
  connectors:
    image: camunda/connectors-bundle:${CAMUNDA_CONNECTORS_VERSION}
    container_name: connectors
    <<: *restart-policy
    ports:
      - "${CONNECTOR_PORT:-8085}:8080"
    environment:
      - CAMUNDA_CLIENT_ZEEBE_REST-ADDRESS=http://zeebe:8080
      - OPERATE_CLIENT_BASEURL=http://operate:8080
      - OPERATE_CLIENT_PROFILE=oidc
      - CAMUNDA_CLIENT_ZEEBE_GRPCADDRESS=http://zeebe:26500
      - OPERATE_CLIENT_AUTHURL=http://keycloak:18080/auth/realms/camunda-platform/protocol/openid-connect/token
      - OPERATE_CLIENT_AUDIENCE=operate-api
      - OPERATE_CLIENT_CLIENTID=connectors
      - OPERATE_CLIENT_CLIENTSECRET=XALaRPl5qwTEItdwCMiPS62nVpKs7dL7
      - ZEEBE_CLIENT_BROKER_GATEWAY-ADDRESS=zeebe:26500
      - ZEEBE_CLIENT_SECURITY_PLAINTEXT=true
      - ZEEBE_CLIENT_ID=${ZEEBE_CLIENT_ID}
      - ZEEBE_CLIENT_SECRET=${ZEEBE_CLIENT_SECRET}
      - ZEEBE_CLIENT_CONFIG_PATH=/tmp/zeebe_auth_cache
      - CAMUNDA_CLIENT_ZEEBE_GRPCADDRESS=http://zeebe:26500
      - ZEEBE_TOKEN_AUDIENCE=zeebe-api
      - ZEEBE_AUTHORIZATION_SERVER_URL=http://keycloak:18080/auth/realms/camunda-platform/protocol/openid-connect/token
      - CAMUNDA_IDENTITY_ISSUER_URL=http://${KEYCLOAK_HOST}:18080/auth/realms/camunda-platform
      - CAMUNDA_IDENTITY_ISSUER_BACKEND_URL=http://keycloak:18080/auth/realms/camunda-platform
      - CAMUNDA_IDENTITY_CLIENT_ID=connectors
      - CAMUNDA_IDENTITY_CLIENT_SECRET=XALaRPl5qwTEItdwCMiPS62nVpKs7dL7
      - CAMUNDA_IDENTITY_TYPE=KEYCLOAK
      - CAMUNDA_IDENTITY_AUDIENCE=operate-api
      - management.endpoints.web.exposure.include=health,info,metrics,prometheus,configprops
      - MANAGEMENT_ENDPOINT_CONFIGPROPS_SHOW_VALUES=ALWAYS
      - management.endpoint.health.probes.enabled=true
    env_file: connector-secrets.txt
    healthcheck:
      test: curl -f http://localhost:8080/actuator/health/readiness
      <<: *healthcheck-defaults
    volumes:
      - ./container.connectors/data:/usr/local/connectors/data
      - ./container.connectors/docker-config:/docker-config
      - ./container.connectors/docker-entrypoint.d:/docker-entrypoint.d
      - ./container.connectors/rw:/usr/local/connectors/rw
    networks:
      - camunda-platform
    depends_on:
      - zeebe
      - operate
      - identity

  # Optimize - Process analytics
  optimize:
    image: camunda/optimize:${CAMUNDA_OPTIMIZE_VERSION}
    container_name: optimize
    <<: *restart-policy
    ports:
      - "${OPTIMIZE_PORT:-8083}:8090"
    environment:
      - OPTIMIZE_ELASTICSEARCH_HOST=elasticsearch
      - OPTIMIZE_ELASTICSEARCH_HTTP_PORT=9200
      - SPRING_PROFILES_ACTIVE=ccsm
      - CAMUNDA_OPTIMIZE_ZEEBE_ENABLED=true
      - CAMUNDA_OPTIMIZE_ENTERPRISE=false
      - CAMUNDA_OPTIMIZE_IDENTITY_ISSUER_URL=http://${KEYCLOAK_HOST}:18080/auth/realms/camunda-platform
      - CAMUNDA_OPTIMIZE_IDENTITY_ISSUER_BACKEND_URL=http://keycloak:18080/auth/realms/camunda-platform
      - CAMUNDA_OPTIMIZE_IDENTITY_CLIENTID=optimize
      - CAMUNDA_OPTIMIZE_IDENTITY_CLIENTSECRET=XALaRPl5qwTEItdwCMiPS62nVpKs7dL7
      - CAMUNDA_OPTIMIZE_IDENTITY_AUDIENCE=optimize-api
      - CAMUNDA_OPTIMIZE_IDENTITY_BASE_URL=http://identity:8084
      - CAMUNDA_OPTIMIZE_MULTITENANCY_ENABLED=${MULTI_TENANCY_ENABLED:-false}
      - CAMUNDA_OPTIMIZE_SECURITY_AUTH_COOKIE_SAME_SITE_ENABLED=false
      - CAMUNDA_OPTIMIZE_UI_LOGOUT_HIDDEN=true
      - management.endpoints.web.exposure.include=health
      - management.endpoint.health.probes.enabled=true
      - JAVA_TOOL_OPTIONS=-Xms${OPTIMIZE_MEMORY:-1G} -Xmx${OPTIMIZE_MEMORY:-1G}
    healthcheck:
      test: curl -f http://localhost:8090/api/readyz
      <<: *healthcheck-defaults
    volumes:
      - ./container.optimize/data:/optimize/config
      - ./container.optimize/docker-config:/docker-config
      - ./container.optimize/docker-entrypoint.d:/docker-entrypoint.d
      - ./container.optimize/rw:/optimize/rw
    networks:
      - camunda-platform
    depends_on:
      - identity
      - elasticsearch

  # Identity - User management
  identity:
    container_name: identity
    image: camunda/identity:${CAMUNDA_IDENTITY_VERSION}
    <<: *restart-policy
    ports:
      - "${IDENTITY_PORT:-8084}:8084"
    environment:
      - SERVER_PORT=8084
      - IDENTITY_RETRY_DELAY_SECONDS=30
      - IDENTITY_URL=http://${HOST}:8084
      - KEYCLOAK_URL=http://keycloak:18080/auth
      - IDENTITY_AUTH_PROVIDER_ISSUER_URL=http://${KEYCLOAK_HOST}:18080/auth/realms/camunda-platform
      - IDENTITY_AUTH_PROVIDER_BACKEND_URL=http://keycloak:18080/auth/realms/camunda-platform
      - IDENTITY_DATABASE_HOST=postgres
      - IDENTITY_DATABASE_PORT=5432
      - IDENTITY_DATABASE_NAME=bitnami_keycloak
      - IDENTITY_DATABASE_USERNAME=bn_keycloak
      - IDENTITY_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - KEYCLOAK_INIT_OPERATE_SECRET=XALaRPl5qwTEItdwCMiPS62nVpKs7dL7
      - KEYCLOAK_INIT_OPERATE_ROOT_URL=http://${HOST}:8081
      - KEYCLOAK_INIT_TASKLIST_SECRET=XALaRPl5qwTEItdwCMiPS62nVpKs7dL7
      - KEYCLOAK_INIT_TASKLIST_ROOT_URL=http://${HOST}:8082
      - KEYCLOAK_INIT_OPTIMIZE_SECRET=XALaRPl5qwTEItdwCMiPS62nVpKs7dL7
      - KEYCLOAK_INIT_OPTIMIZE_ROOT_URL=http://${HOST}:8083
      - KEYCLOAK_INIT_CONNECTORS_SECRET=XALaRPl5qwTEItdwCMiPS62nVpKs7dL7
      - KEYCLOAK_INIT_CONNECTORS_ROOT_URL=http://${HOST}:8085
      - KEYCLOAK_INIT_WEBMODELER_ROOT_URL=http://${HOST}:8070
      - KEYCLOAK_INIT_ZEEBE_NAME=zeebe
      - KEYCLOAK_USERS_0_USERNAME=admin
      - KEYCLOAK_USERS_0_PASSWORD=admin
      - KEYCLOAK_USERS_0_FIRST_NAME=Admin
      - KEYCLOAK_USERS_0_EMAIL=admin@example.com
      - KEYCLOAK_USERS_0_ROLES_0=Identity
      - KEYCLOAK_USERS_0_ROLES_1=Optimize
      - KEYCLOAK_USERS_0_ROLES_2=Operate
      - KEYCLOAK_USERS_0_ROLES_3=Tasklist
      - KEYCLOAK_USERS_0_ROLES_4=Web Modeler
      - KEYCLOAK_USERS_0_ROLES_5=Web Modeler Admin
      - KEYCLOAK_USERS_0_ROLES_6=Zeebe
      - KEYCLOAK_CLIENTS_0_NAME=zeebe
      - KEYCLOAK_CLIENTS_0_ID=${ZEEBE_CLIENT_ID}
      - KEYCLOAK_CLIENTS_0_SECRET=${ZEEBE_CLIENT_SECRET}
      - KEYCLOAK_CLIENTS_0_TYPE=M2M
      - KEYCLOAK_CLIENTS_0_PERMISSIONS_0_RESOURCE_SERVER_ID=zeebe-api
      - KEYCLOAK_CLIENTS_0_PERMISSIONS_0_DEFINITION=write:*
      - KEYCLOAK_CLIENTS_0_PERMISSIONS_1_RESOURCE_SERVER_ID=operate-api
      - KEYCLOAK_CLIENTS_0_PERMISSIONS_1_DEFINITION=write:*
      - KEYCLOAK_CLIENTS_0_PERMISSIONS_2_RESOURCE_SERVER_ID=tasklist-api
      - KEYCLOAK_CLIENTS_0_PERMISSIONS_2_DEFINITION=write:*
      - KEYCLOAK_CLIENTS_0_PERMISSIONS_3_RESOURCE_SERVER_ID=optimize-api
      - KEYCLOAK_CLIENTS_0_PERMISSIONS_3_DEFINITION=write:*
      - KEYCLOAK_CLIENTS_0_PERMISSIONS_4_RESOURCE_SERVER_ID=tasklist-api
      - KEYCLOAK_CLIENTS_0_PERMISSIONS_4_DEFINITION=read:*
      - KEYCLOAK_CLIENTS_0_PERMISSIONS_5_RESOURCE_SERVER_ID=operate-api
      - KEYCLOAK_CLIENTS_0_PERMISSIONS_5_DEFINITION=read:*
      - MULTITENANCY_ENABLED=${MULTI_TENANCY_ENABLED:-false}
      - RESOURCE_PERMISSIONS_ENABLED=${RESOURCE_AUTHORIZATIONS_ENABLED:-true}
    healthcheck:
      test: wget -q --tries=1 --spider http://localhost:8084/actuator/health
      <<: *healthcheck-defaults
    volumes:
      - ./container.identity/data:/app/data
      - ./container.identity/docker-config:/docker-config
      - ./container.identity/docker-entrypoint.d:/docker-entrypoint.d
      - ./container.identity/rw:/app/rw
    networks:
      - camunda-platform
      - identity-network
    depends_on:
      - keycloak
      - postgres

  # PostgreSQL - Database for Identity
  postgres:
    container_name: postgres
    image: postgres:${POSTGRES_VERSION}
    <<: *restart-policy
    environment:
      - POSTGRES_DB=bitnami_keycloak
      - POSTGRES_USER=bn_keycloak
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: /bin/bash /docker-config/healthcheck.sh
      <<: *healthcheck-defaults
    volumes:
      - ./container.postgres/data:/var/lib/postgresql/data
      - ./container.postgres/docker-config:/docker-config
      - ./container.postgres/docker-entrypoint.d:/docker-entrypoint.d
      - ./container.postgres/rw:/var/lib/postgresql/rw
    networks:
      - identity-network

  # Keycloak - Authentication server
  keycloak:
    container_name: keycloak
    image: bitnami/keycloak:${KEYCLOAK_SERVER_VERSION}
    <<: *restart-policy
    ports:
      - "${KEYCLOAK_PORT:-18080}:18080"
    environment:
      - KEYCLOAK_HTTP_PORT=18080
      - KEYCLOAK_HTTP_RELATIVE_PATH=/auth
      - KEYCLOAK_DATABASE_HOST=postgres
      - KEYCLOAK_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - KEYCLOAK_ADMIN_USER=admin
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
    healthcheck:
      test: curl -f http://localhost:18080/auth
      <<: *healthcheck-defaults
    volumes:
      - ./container.keycloak/data:/opt/bitnami/keycloak/data
      - ./container.keycloak/docker-config:/docker-config
      - ./container.keycloak/docker-entrypoint.d:/docker-entrypoint.d
      - ./container.keycloak/rw:/opt/bitnami/keycloak/rw
    networks:
      - camunda-platform
      - identity-network
    depends_on:
      - postgres

  # Elasticsearch - Database for workflow data
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: elasticsearch
    <<: *restart-policy
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
      - "9300:9300"
    environment:
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - xpack.security.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false
      - ES_JAVA_OPTS=-Xms${ELASTICSEARCH_MEMORY:-1G} -Xmx${ELASTICSEARCH_MEMORY:-1G}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: /bin/bash /docker-config/healthcheck.sh
      <<: *healthcheck-defaults
    volumes:
      - ./container.elasticsearch/data:/usr/share/elasticsearch/data
      - ./container.elasticsearch/docker-config:/docker-config
      - ./container.elasticsearch/docker-entrypoint.d:/docker-entrypoint.d
      - ./container.elasticsearch/rw:/usr/share/elasticsearch/rw
    networks:
      - camunda-platform

  # Web Modeler Database
  web-modeler-db:
    container_name: web-modeler-db
    image: postgres:${POSTGRES_VERSION}
    <<: *restart-policy
    environment:
      - POSTGRES_DB=web-modeler-db
      - POSTGRES_USER=web-modeler-db-user
      - POSTGRES_PASSWORD=web-modeler-db-password
    healthcheck:
      test: /bin/bash /docker-config/healthcheck.sh
      <<: *healthcheck-defaults
    volumes:
      - ./container.web-modeler-db/data:/var/lib/postgresql/data
      - ./container.web-modeler-db/docker-config:/docker-config
      - ./container.web-modeler-db/docker-entrypoint.d:/docker-entrypoint.d
      - ./container.web-modeler-db/rw:/var/lib/postgresql/rw
    networks:
      - web-modeler
      
  # Mail service for Web Modeler
  mailpit:
    container_name: mailpit
    image: axllent/mailpit:${MAILPIT_VERSION:-v1.8}
    <<: *restart-policy
    ports:
      - "1025:1025"
      - "8075:8025"
    healthcheck:
      test: /bin/bash /docker-config/healthcheck.sh
      <<: *healthcheck-defaults
    volumes:
      - ./container.mailpit/data:/data
      - ./container.mailpit/docker-config:/docker-config
      - ./container.mailpit/docker-entrypoint.d:/docker-entrypoint.d
      - ./container.mailpit/rw:/rw
    networks:
      - web-modeler

  # Web Modeler REST API
  web-modeler-restapi:
    container_name: web-modeler-restapi
    image: camunda/web-modeler-restapi:${CAMUNDA_WEB_MODELER_VERSION}
    <<: *restart-policy
    command: /bin/sh -c "java $JAVA_OPTIONS org.springframework.boot.loader.JarLauncher"
    ports:
      - "8091:8091"
    environment:
      - JAVA_OPTIONS=-Xmx512m
      - LOGGING_LEVEL_IO_CAMUNDA_MODELER=DEBUG
      - CAMUNDA_IDENTITY_BASEURL=http://identity:8084/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://web-modeler-db:5432/web-modeler-db
      - SPRING_DATASOURCE_USERNAME=web-modeler-db-user
      - SPRING_DATASOURCE_PASSWORD=web-modeler-db-password
      - SPRING_PROFILES_INCLUDE=default-logging
      - RESTAPI_PUSHER_HOST=web-modeler-websockets
      - RESTAPI_PUSHER_PORT=8060
      - RESTAPI_PUSHER_APP_ID=web-modeler-app
      - RESTAPI_PUSHER_KEY=web-modeler-app-key
      - RESTAPI_PUSHER_SECRET=web-modeler-app-secret
      - RESTAPI_OAUTH2_TOKEN_ISSUER=http://${KEYCLOAK_HOST}:18080/auth/realms/camunda-platform
      - RESTAPI_OAUTH2_TOKEN_ISSUER_BACKEND_URL=http://keycloak:18080/auth/realms/camunda-platform
      - RESTAPI_SERVER_URL=http://${HOST}:8070
      - RESTAPI_MAIL_HOST=mailpit
      - RESTAPI_MAIL_PORT=1025
      - RESTAPI_MAIL_ENABLE_TLS=false
      - RESTAPI_MAIL_FROM_ADDRESS=noreply@example.com
      - CAMUNDA_MODELER_CLUSTERS_0_ID=local-zeebe
      - CAMUNDA_MODELER_CLUSTERS_0_NAME=Local Zeebe instance
      - CAMUNDA_MODELER_CLUSTERS_0_VERSION=${CAMUNDA_ZEEBE_VERSION}
      - CAMUNDA_MODELER_CLUSTERS_0_URL_ZEEBE_GRPC=grpc://zeebe:26500
      - CAMUNDA_MODELER_CLUSTERS_0_URL_ZEEBE_REST=http://zeebe:8080
      - CAMUNDA_MODELER_CLUSTERS_0_URL_OPERATE=http://operate:8080
      - CAMUNDA_MODELER_CLUSTERS_0_URL_TASKLIST=http://tasklist:8080
      - CAMUNDA_MODELER_CLUSTERS_0_AUTH_CLIENT_ID=${ZEEBE_CLIENT_ID}
      - CAMUNDA_MODELER_CLUSTERS_0_AUTH_CLIENT_SECRET=${ZEEBE_CLIENT_SECRET}
      - CAMUNDA_MODELER_CLUSTERS_0_AUTH_AUDIENCE=zeebe-api
      - CAMUNDA_MODELER_CLUSTERS_0_AUTH_SERVER_URL=http://keycloak:18080/auth/realms/camunda-platform/protocol/openid-connect/token
    healthcheck:
      test: /bin/bash /docker-config/healthcheck.sh
      <<: *healthcheck-defaults
    volumes:
      - ./container.web-modeler-restapi/data:/app/data
      - ./container.web-modeler-restapi/docker-config:/docker-config
      - ./container.web-modeler-restapi/docker-entrypoint.d:/docker-entrypoint.d
      - ./container.web-modeler-restapi/rw:/app/rw
    networks:
      - web-modeler
      - camunda-platform
    depends_on:
      - web-modeler-db
      - mailpit
      - identity
      - zeebe

  # Web Modeler WebApp
  web-modeler-webapp:
    container_name: web-modeler-webapp
    image: camunda/web-modeler-webapp:${CAMUNDA_WEB_MODELER_VERSION}
    <<: *restart-policy
    ports:
      - "${WEB_MODELER_PORT:-8070}:8070"
    environment:
      - RESTAPI_HOST=web-modeler-restapi
      - SERVER_HTTPS_ONLY=false
      - SERVER_URL=http://${HOST}:8070
      - PUSHER_APP_ID=web-modeler-app
      - PUSHER_KEY=web-modeler-app-key
      - PUSHER_SECRET=web-modeler-app-secret
      - PUSHER_HOST=web-modeler-websockets
      - PUSHER_PORT=8060
      - CLIENT_PUSHER_HOST=${HOST}
      - CLIENT_PUSHER_PORT=8060
      - CLIENT_PUSHER_FORCE_TLS=false
      - CLIENT_PUSHER_KEY=web-modeler-app-key
      - OAUTH2_CLIENT_ID=web-modeler
      - OAUTH2_JWKS_URL=http://keycloak:18080/auth/realms/camunda-platform/protocol/openid-connect/certs
      - OAUTH2_TOKEN_AUDIENCE=web-modeler-api
      - OAUTH2_TOKEN_ISSUER=http://${KEYCLOAK_HOST}:18080/auth/realms/camunda-platform
      - IDENTITY_BASE_URL=http://identity:8084/
      - PLAY_ENABLED=true
    healthcheck:
      test: /bin/bash /docker-config/healthcheck.sh
      <<: *healthcheck-defaults
    volumes:
      - ./container.web-modeler-webapp/data:/app/data
      - ./container.web-modeler-webapp/docker-config:/docker-config
      - ./container.web-modeler-webapp/docker-entrypoint.d:/docker-entrypoint.d
      - ./container.web-modeler-webapp/rw:/app/rw
    networks:
      - web-modeler
      - camunda-platform
    depends_on:
      - web-modeler-restapi
      - web-modeler-websockets
      - identity

  # Web Modeler WebSockets
  web-modeler-websockets:
    container_name: web-modeler-websockets
    image: camunda/web-modeler-websockets:${CAMUNDA_WEB_MODELER_VERSION}
    <<: *restart-policy
    ports:
      - "8060:8060"
    environment:
      - APP_NAME=Web Modeler Self-Managed WebSockets
      - APP_DEBUG=true
      - PUSHER_APP_ID=web-modeler-app
      - PUSHER_APP_KEY=web-modeler-app-key
      - PUSHER_APP_SECRET=web-modeler-app-secret
    healthcheck:
      test: /bin/bash /docker-config/healthcheck.sh
      <<: *healthcheck-defaults
    volumes:
      - ./container.web-modeler-websockets/data:/app/data
      - ./container.web-modeler-websockets/docker-config:/docker-config
      - ./container.web-modeler-websockets/docker-entrypoint.d:/docker-entrypoint.d
      - ./container.web-modeler-websockets/rw:/app/rw
    networks:
      - web-modeler

  # Kibana - Analytics and search interface for Elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    container_name: kibana
    <<: *restart-policy
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - ./container.kibana/data:/usr/share/kibana/data
      - ./container.kibana/docker-config:/docker-config
      - ./container.kibana/docker-entrypoint.d:/docker-entrypoint.d
      - ./container.kibana/rw:/usr/share/kibana/rw
    networks:
      - camunda-platform
    depends_on:
      - elasticsearch
    profiles:
      - kibana

networks:
  # Three networks: One for Camunda Platform, one for Identity providers, and one for Web Modeler
  camunda-platform:
    driver: bridge
  identity-network:
    driver: bridge
  web-modeler:
    driver: bridge
